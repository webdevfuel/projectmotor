package shared

import (
	"context"
	"fmt"
	"io"
)

type Toggle struct {
	ID         string
	Checked    bool
	Attributes templ.Attributes
}

func (t *Toggle) Render(ctx context.Context, w io.Writer) error {
	return toggle(t).Render(ctx, w)
}

func NewToggle(opts ...func(*Toggle)) *Toggle {
	t := &Toggle{
		Attributes: templ.Attributes{},
	}

	for _, o := range opts {
		o(t)
	}

	return t
}

func WithToggleID(id string) func(*Toggle) {
	return func(t *Toggle) {
		t.ID = id
	}
}

func WithToggleChecked(checked bool) func(*Toggle) {
	return func(t *Toggle) {
		t.Checked = checked
	}
}

func WithToggleURL(url string) func(*Toggle) {
	return func(t *Toggle) {
		t.Attributes["hx-patch"] = url
	}
}

func WithToggleEvent(event string) func(*Toggle) {
	return func(t *Toggle) {
		key := fmt.Sprintf("@%s.window", event)
		t.Attributes[key] = "$el.toggleAttribute('checked'); $el.toggleAttribute('aria-checked');"
	}
}

templ toggle(t *Toggle) {
	<div class="flex items-center" x-data>
		<label for={ t.ID } class="text-sm text-gray-500 me-3 dark:text-gray-400">
			{ children... }
		</label>
		<input
			type="checkbox"
			id={ t.ID }
			class="relative w-11 h-6 p-px bg-gray-100 border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-blue-600 disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:text-blue-600 checked:border-blue-600 focus:checked:border-blue-600 dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-offset-gray-600 before:inline-block before:size-5 before:bg-white checked:before:bg-blue-200 before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-gray-400 dark:checked:before:bg-blue-200"
			checked?={ t.Checked }
			aria-checked?={ t.Checked }
			hx-target={ fmt.Sprintf("label[for='%s']", t.ID) }
			{ t.Attributes... }
		/>
	</div>
}
