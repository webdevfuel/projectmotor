package shared

import "strings"

type As int

const (
	AsButton As = iota
	AsHyperlink
)

type Button struct {
	Type       string
	Disabled   bool
	Color      string
	Size       string
	Attributes templ.Attributes
	As         As
	Href       string
}

func NewButton(opts ...func(*Button)) *Button {
	b := &Button{
		Type:       "button",
		Disabled:   false,
		Color:      "blue",
		Size:       "md",
		Attributes: templ.Attributes{},
		As:         AsButton,
		Href:       "",
	}
	for _, o := range opts {
		o(b)
	}
	return b
}

func WithButtonColor(c string) func(*Button) {
	return func(b *Button) {
		b.Color = c
	}
}

func WithButtonSize(s string) func(*Button) {
	return func(b *Button) {
		b.Size = s
	}
}

func WithButtonDisabled(d bool) func(*Button) {
	return func(b *Button) {
		b.Disabled = d
	}
}

func WithButtonType(t string) func(*Button) {
	return func(b *Button) {
		b.Type = t
	}
}

func WithButtonAttributes(a templ.Attributes) func(*Button) {
	return func(b *Button) {
		b.Attributes = a
	}
}

func WithButtonAs(a As) func(*Button) {
	return func(button *Button) {
		button.As = a
	}
}

func WithButtonHref(h string) func(*Button) {
	return func(b *Button) {
		b.Href = h
	}
}

func (b *Button) Render(ctx context.Context, w io.Writer) error {
	return button(b).Render(ctx, w)
}

templ button(b *Button) {
	if b.As == AsButton {
		<button
			class={ GenerateClassString(b) }
			type={ b.Type }
			{ b.Attributes... }
		>
			{ children... }
		</button>
	}
	if b.As == AsHyperlink {
		<a
			class={ GenerateClassString(b) }
			href={ templ.SafeURL(b.Href) }
			{ b.Attributes... }
		>
			{ children... }
		</a>
	}
}

func GenerateClassString(b *Button) string {
	var classes []string

	switch b.Color {
	case "blue":
		classes = append(classes, "border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600")
	case "red":
		classes = append(classes, "border border-transparent bg-red-500 text-white hover:bg-red-600 disabled:opacity-50 disabled:pointer-events-none dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600")
	}

	switch b.Size {
	case "sm":
		classes = append(classes, "py-2 px-3")
	case "md":
		classes = append(classes, "py-3 px-4")
	case "lg":
		classes = append(classes, "p-4 sm:p-5")
	}

	classes = append(classes, "inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg")

	return strings.Join(classes, " ")
}
