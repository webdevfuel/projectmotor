package template

import (
	"fmt"
	"github.com/webdevfuel/projectmotor/database"
	"github.com/webdevfuel/projectmotor/template/csrf"
	"github.com/webdevfuel/projectmotor/template/layout"
	"github.com/webdevfuel/projectmotor/template/shared"
	"github.com/webdevfuel/projectmotor/validator"
)

type ProjectShareUser struct {
	ID    int32
	Email string
}

templ ProjectShare(project database.Project, users []ProjectShareUser) {
	@layout.Dashboard() {
		<div class="flex items-center justify-between" id="project">
			@ProjectTitle(project, NewProjectTitleOpts())
			@ProjectStatus(project)
		</div>
		@ProjectTabs(project.ID, CurrentTabShare)
		<p class="dark:text-white font-bold text-lg mt-8">Users with access</p>
		<p class="dark:text-gray-400 text-sm">Below you can see a list of all users that currently have shared access to this project.</p>
		@ProjectCurrentlyShared(project.ID, users)
		<p class="dark:text-white font-bold text-lg mt-8">Share with new user</p>
		<p class="dark:text-gray-400 text-sm">Please ensure the user already has a ProjectMotor account, otherwise sharing won't work.</p>
		@ProjectShareForm(project.ID, validator.NewValidatedSlice())
	}
}

templ ProjectCurrentlyShared(projectId int32, users []ProjectShareUser) {
	<div id="emails" class="mt-4">
		<div class="last:flex hidden items-center justify-between bg-white border shadow-sm rounded-xl p-4 md:p-5 dark:bg-slate-800 dark:border-gray-700 mt-2">
			<p class="dark:text-white text-sm">
				Oops! It seems you haven't shared this project with anyone yet! ðŸ˜”
			</p>
		</div>
		for _, user := range users {
			@ProjectCurrentlySharedRow(projectId, user, false)
		}
	</div>
}

templ ProjectCurrentlySharedRow(projectId int32, user ProjectShareUser, swapOob bool) {
	<div
		if swapOob {
			hx-swap-oob="beforeend:#emails"
		} else {
			id={ sharedRowId(user.ID, false) }
		}
	>
		<div
			if swapOob {
				id={ sharedRowId(user.ID, false) }
			}
			class="flex items-center justify-between bg-white border shadow-sm rounded-xl p-4 md:p-5 dark:bg-slate-800 dark:border-gray-700 mt-2"
		>
			<p class="dark:text-gray-300 text-sm">{ user.Email }</p>
			@shared.NewButton(
				shared.WithButtonSize(shared.ButtonSm),
				shared.WithButtonColor(shared.ButtonRed),
				shared.WithButtonAttribute("hx-delete", fmt.Sprintf("/projects/%d/share/%d", projectId, user.ID)),
				shared.WithButtonAttribute("hx-target", sharedRowId(user.ID, true)),
				shared.WithButtonAttribute("hx-swap", "delete"),
				shared.WithButtonAttribute("hx-disabled-elt", "this"),
				shared.WithButtonAttribute("hx-indicator", "find #spinner"),
				shared.WithButtonAttribute("hx-headers", fmt.Sprintf(`{"X-CSRF-Token": "%s"}`, csrf.CSRFHeader(ctx))),
			) {
				Revoke access
				<svg id="spinner" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-circle w-4 h-4 htmx-indicator [&.htmx-request]:block hidden animate-spin"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>
			}
		</div>
	</div>
}

func sharedRowId(id int32, appendId bool) string {
	s := fmt.Sprintf("shared-row-%d", id)
	if appendId {
		return fmt.Sprintf("#%s", s)
	}
	return s
}
